//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CBlunt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CBlunt.ANTLR.AutoGeneratedParser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CBluntParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		NUMBER=32, STRING=33, ID=34, DIGIT=35, WS=36;
	public const int
		RULE_start = 0, RULE_function = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_idcall = 4, RULE_iterative = 5, RULE_selective = 6, RULE_declaration = 7, 
		RULE_expression = 8, RULE_condition = 9, RULE_logic = 10, RULE_type = 11, 
		RULE_parameter = 12;
	public static readonly string[] ruleNames = {
		"start", "function", "statements", "statement", "idcall", "iterative", 
		"selective", "declaration", "expression", "condition", "logic", "type", 
		"parameter"
	};

	private static readonly string[] _LiteralNames = {
		null, "'void'", "'Main'", "'('", "')'", "'{'", "'}'", "','", "';'", "'['", 
		"']'", "'while'", "'for'", "'if'", "'='", "'array'", "'*'", "'/'", "'+'", 
		"'-'", "'=='", "'>='", "'<='", "'>'", "'<'", "'!='", "'||'", "'^^'", "'&&'", 
		"'number'", "'string'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NUMBER", "STRING", "ID", 
		"DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CBlunt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CBluntParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CBluntParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CBluntParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(T__0);
			State = 27; Match(T__1);
			State = 28; Match(T__2);
			State = 29; Match(T__3);
			State = 30; Match(T__4);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				State = 31; statements();
				}
			}

			State = 34; Match(T__5);
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) {
				{
				State = 37;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 35; function();
					}
					break;
				case 2:
					{
					State = 36; declaration();
					}
					break;
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(CBluntParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CBluntParser.ID, i);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; type();
			State = 43; Match(ID);
			State = 44; Match(T__2);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) {
				{
				State = 45; type();
				State = 46; Match(ID);
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 47; Match(T__6);
					State = 48; type();
					State = 49; Match(ID);
					}
					}
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 58; Match(T__3);
			State = 59; Match(T__4);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				State = 60; statements();
				}
			}

			State = 63; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; statement();
				State = 66; statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public IdcallContext idcall() {
			return GetRuleContext<IdcallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__28:
			case T__29:
			case T__30:
				{
				State = 71; declaration();
				}
				break;
			case ID:
				{
				State = 72; idcall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 75; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdcallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ITerminalNode DIGIT() { return GetToken(CBluntParser.DIGIT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public IdcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idcall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdcall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdcallContext idcall() {
		IdcallContext _localctx = new IdcallContext(Context, State);
		EnterRule(_localctx, 8, RULE_idcall);
		int _la;
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; Match(ID);
				State = 79; Match(T__8);
				State = 80; Match(DIGIT);
				State = 81; Match(T__9);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82; Match(ID);
				State = 83; Match(T__2);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					State = 84; parameter();
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 85; Match(T__6);
						State = 86; parameter();
						}
						}
						State = 91;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 94; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_iterative);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97; Match(T__10);
				State = 98; Match(T__2);
				State = 99; condition();
				State = 100; Match(T__3);
				State = 101; Match(T__4);
				State = 102; statement();
				State = 103; Match(T__5);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; Match(T__11);
				State = 106; Match(T__2);
				State = 107; declaration();
				State = 108; Match(T__7);
				State = 109; condition();
				State = 110; Match(T__7);
				State = 111; expression(0);
				State = 112; Match(T__3);
				State = 113; Match(T__4);
				State = 114; statement();
				State = 115; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_selective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(T__12);
			State = 120; Match(T__2);
			State = 121; condition();
			State = 122; Match(T__3);
			State = 123; Match(T__4);
			State = 124; statement();
			State = 125; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127; type();
				State = 128; Match(ID);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 129; Match(T__13);
					State = 130; expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; type();
				State = 134; Match(T__14);
				State = 135; Match(ID);
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 136; Match(T__13);
					State = 137; Match(T__4);
					State = 143;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 138; expression(0);
							State = 139; Match(T__6);
							}
							} 
						}
						State = 145;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
					}
					State = 146; expression(0);
					State = 147; Match(T__5);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public IdcallContext idcall() {
			return GetRuleContext<IdcallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 154; Match(T__2);
				State = 155; expression(0);
				State = 156; Match(T__3);
				}
				break;
			case 2:
				{
				State = 158; parameter();
				}
				break;
			case 3:
				{
				State = 159; idcall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 168;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 163;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 164; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 165;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 166;
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 167; expression(5);
						}
						break;
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicContext[] logic() {
			return GetRuleContexts<LogicContext>();
		}
		public LogicContext logic(int i) {
			return GetRuleContext<LogicContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_condition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 173; expression(0);
				State = 174; logic();
				State = 175; expression(0);
				}
				break;
			case 2:
				{
				State = 177; Match(ID);
				}
				break;
			}
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 180; logic();
					State = 181; condition();
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicContext : ParserRuleContext {
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 20, RULE_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(CBluntParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(CBluntParser.NUMBER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xC5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x36', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x39', 
		'\v', '\x3', '\x5', '\x3', ';', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '@', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'H', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'L', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'Z', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', ']', '\v', '\x6', '\x5', '\x6', '_', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x62', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'x', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x86', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x90', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\x93', '\v', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x98', '\n', '\t', '\x5', '\t', 
		'\x9A', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xA3', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\xAB', '\n', '\n', '\f', '\n', '\xE', '\n', '\xAE', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xB5', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\xBA', '\n', '\v', '\f', '\v', '\xE', '\v', '\xBD', 
		'\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x2', '\x3', '\x12', '\xF', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x2', '\a', '\x3', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x14', '\x15', '\x3', '\x2', '\x16', '\x1E', '\x4', '\x2', '\x3', '\x3', 
		'\x1F', '!', '\x3', '\x2', '\"', '$', '\x2', '\xCE', '\x2', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', '\x2', '\x6', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'K', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\f', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'y', '\x3', '\x2', '\x2', '\x2', '\x10', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1D', '\a', '\x3', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\x4', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x5', '\x2', '\x2', 
		'\x1F', ' ', '\a', '\x6', '\x2', '\x2', ' ', '\"', '\a', '\a', '\x2', 
		'\x2', '!', '#', '\x5', '\x6', '\x4', '\x2', '\"', '!', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', 
		'\x2', '\x2', '\x2', '$', ')', '\a', '\b', '\x2', '\x2', '%', '(', '\x5', 
		'\x4', '\x3', '\x2', '&', '(', '\x5', '\x10', '\t', '\x2', '\'', '%', 
		'\x3', '\x2', '\x2', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', 
		'+', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '\x18', 
		'\r', '\x2', '-', '.', '\a', '$', '\x2', '\x2', '.', ':', '\a', '\x5', 
		'\x2', '\x2', '/', '\x30', '\x5', '\x18', '\r', '\x2', '\x30', '\x37', 
		'\a', '$', '\x2', '\x2', '\x31', '\x32', '\a', '\t', '\x2', '\x2', '\x32', 
		'\x33', '\x5', '\x18', '\r', '\x2', '\x33', '\x34', '\a', '$', '\x2', 
		'\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', ':', '/', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 
		'\x6', '\x2', '\x2', '=', '?', '\a', '\a', '\x2', '\x2', '>', '@', '\x5', 
		'\x6', '\x4', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\a', '\b', '\x2', '\x2', '\x42', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x5', '\b', '\x5', '\x2', '\x44', '\x45', '\x5', 
		'\x6', '\x4', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'H', '\x5', '\b', '\x5', '\x2', 'G', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'L', '\x5', '\x10', '\t', '\x2', 'J', 'L', '\x5', '\n', '\x6', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\n', '\x2', 
		'\x2', 'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', '\x62', '\a', '$', 
		'\x2', '\x2', 'P', 'Q', '\a', '$', '\x2', '\x2', 'Q', 'R', '\a', '\v', 
		'\x2', '\x2', 'R', 'S', '\a', '%', '\x2', '\x2', 'S', '\x62', '\a', '\f', 
		'\x2', '\x2', 'T', 'U', '\a', '$', '\x2', '\x2', 'U', '^', '\a', '\x5', 
		'\x2', '\x2', 'V', '[', '\x5', '\x1A', '\xE', '\x2', 'W', 'X', '\a', '\t', 
		'\x2', '\x2', 'X', 'Z', '\x5', '\x1A', '\xE', '\x2', 'Y', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '_', 
		'\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', 
		'V', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\a', '\x6', '\x2', 
		'\x2', '\x61', 'O', '\x3', '\x2', '\x2', '\x2', '\x61', 'P', '\x3', '\x2', 
		'\x2', '\x2', '\x61', 'T', '\x3', '\x2', '\x2', '\x2', '\x62', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\r', '\x2', '\x2', '\x64', 
		'\x65', '\a', '\x5', '\x2', '\x2', '\x65', '\x66', '\x5', '\x14', '\v', 
		'\x2', '\x66', 'g', '\a', '\x6', '\x2', '\x2', 'g', 'h', '\a', '\a', '\x2', 
		'\x2', 'h', 'i', '\x5', '\b', '\x5', '\x2', 'i', 'j', '\a', '\b', '\x2', 
		'\x2', 'j', 'x', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\xE', '\x2', 
		'\x2', 'l', 'm', '\a', '\x5', '\x2', '\x2', 'm', 'n', '\x5', '\x10', '\t', 
		'\x2', 'n', 'o', '\a', '\n', '\x2', '\x2', 'o', 'p', '\x5', '\x14', '\v', 
		'\x2', 'p', 'q', '\a', '\n', '\x2', '\x2', 'q', 'r', '\x5', '\x12', '\n', 
		'\x2', 'r', 's', '\a', '\x6', '\x2', '\x2', 's', 't', '\a', '\a', '\x2', 
		'\x2', 't', 'u', '\x5', '\b', '\x5', '\x2', 'u', 'v', '\a', '\b', '\x2', 
		'\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', '\x63', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'k', '\x3', '\x2', '\x2', '\x2', 'x', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\a', '\xF', '\x2', '\x2', 'z', '{', '\a', 
		'\x5', '\x2', '\x2', '{', '|', '\x5', '\x14', '\v', '\x2', '|', '}', '\a', 
		'\x6', '\x2', '\x2', '}', '~', '\a', '\a', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\b', '\x5', '\x2', '\x7F', '\x80', '\a', '\b', '\x2', '\x2', '\x80', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x5', '\x18', '\r', 
		'\x2', '\x82', '\x85', '\a', '$', '\x2', '\x2', '\x83', '\x84', '\a', 
		'\x10', '\x2', '\x2', '\x84', '\x86', '\x5', '\x12', '\n', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x5', 
		'\x18', '\r', '\x2', '\x88', '\x89', '\a', '\x11', '\x2', '\x2', '\x89', 
		'\x97', '\a', '$', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x10', '\x2', 
		'\x2', '\x8B', '\x91', '\a', '\a', '\x2', '\x2', '\x8C', '\x8D', '\x5', 
		'\x12', '\n', '\x2', '\x8D', '\x8E', '\a', '\t', '\x2', '\x2', '\x8E', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x5', '\x12', '\n', '\x2', '\x95', '\x96', '\a', 
		'\b', '\x2', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x87', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\b', '\n', '\x1', 
		'\x2', '\x9C', '\x9D', '\a', '\x5', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'\x12', '\n', '\x2', '\x9E', '\x9F', '\a', '\x6', '\x2', '\x2', '\x9F', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA3', '\x5', '\x1A', '\xE', 
		'\x2', '\xA1', '\xA3', '\x5', '\n', '\x6', '\x2', '\xA2', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\f', '\a', '\x2', '\x2', '\xA5', '\xA6', '\t', 
		'\x2', '\x2', '\x2', '\xA6', '\xAB', '\x5', '\x12', '\n', '\b', '\xA7', 
		'\xA8', '\f', '\x6', '\x2', '\x2', '\xA8', '\xA9', '\t', '\x3', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\x12', '\n', '\a', '\xAA', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\x5', '\x12', '\n', '\x2', '\xB0', '\xB1', '\x5', '\x16', '\f', 
		'\x2', '\xB1', '\xB2', '\x5', '\x12', '\n', '\x2', '\xB2', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\a', '$', '\x2', '\x2', '\xB4', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x5', 
		'\x16', '\f', '\x2', '\xB7', '\xB8', '\x5', '\x14', '\v', '\x2', '\xB8', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\t', '\x4', '\x2', '\x2', '\xBF', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\t', '\x5', '\x2', '\x2', '\xC1', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\t', '\x6', '\x2', 
		'\x2', '\xC3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x17', '\"', '\'', 
		')', '\x37', ':', '?', 'G', 'K', '[', '^', '\x61', 'w', '\x85', '\x91', 
		'\x97', '\x99', '\xA2', '\xAA', '\xAC', '\xB4', '\xBB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CBlunt.ANTLR.AutoGeneratedParser
