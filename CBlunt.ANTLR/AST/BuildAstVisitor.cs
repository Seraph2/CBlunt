using System;
using Antlr4.Runtime;
using CBlunt.ANTLR.AST.AbstractNodes;
using CBlunt.ANTLR.AST.Arithmetics;
using CBlunt.ANTLR.AutoGeneratedParser;

namespace CBlunt.ANTLR.AST
{
    public class BuildAstVisitor : CBluntBaseVisitor<BinaryNode>
    {
        public override BinaryNode VisitStart(CBluntParser.StartContext context)
        {
            return Visit(context);
        }

        public override BinaryNode VisitOperator(CBluntParser.OperatorContext context)
        {
            BinaryNode binNode;

            // contain cases for +, -, *, /
            switch(context.Start.Type)
            {
                case CBluntLexer.T__29: // +
                    binNode = new AdditionNode();
                break;
                case CBluntLexer.T__30: // - 
                    binNode = new SubtractionNode();
                break;
                case CBluntLexer.T__31: // *
                    binNode = new MultiplicationNode();
                    break;
                case CBluntLexer.T__32: // /
                    binNode = new DivisionNode();
                break;
                default:
                    throw new Exception("Oprator unknown");
                break;
            }

            binNode.LeftChild = Visit(context.GetChild(0));
            binNode.RightChild = Visit(context.GetChild(1));

            return binNode;
        }

        
    }
}