using System;
using System.Collections.Generic;
using System.Linq;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using CBlunt.ANTLR.AutoGeneratedParser;

namespace CBlunt.ANTLR
{
    class CBluntSemanticChecker : CBluntBaseVisitor<int>
    {
        /// TODO: Find a better name
        private Dictionary<string, Dictionary<string, string>> _classLevelVariablesDictionary = new Dictionary<string, Dictionary<string, string>>();
        private LinkedList<Dictionary<string, Dictionary<string, string>>> _scopeLevelLinkedList = new LinkedList<Dictionary<string, Dictionary<string, string>>>();

        public override int VisitStart([NotNull]CBluntParser.StartContext context)
        {
#if DEBUG
            Console.WriteLine("Beginning semantic checking");
            Console.WriteLine("VisitStart");
#endif

            for (var i = 0; i < context.ChildCount; ++i)
            {
                if (context.declaration(i) != null)
                    Visit(context.declaration(i));
                    
                if (context.function(i) != null)
                    Visit(context.function(i));
            }

#if DEBUG
            Console.WriteLine("Finished semantic checking");
#endif

            return 0;
        }

        public override int VisitDeclaration([NotNull]CBluntParser.DeclarationContext context)
        {
#if DEBUG
            Console.WriteLine("VisitDeclaration");
#endif
            // Get the variable's type. We do not need to check if the variable's type is correct because that has already been done by the parser
            var variableType = context.children[0].GetText();

            // Get the variable's name
            var variableName = context.children[1].GetText();

            // Get the variable's value if it exists. A context with 4 children is a declaration followed by an assignment
            var variableValue = context.children.Count == 4 ? context.children[3].GetText() : null;

            // Get the parent index of this visitor
            var parentRuleIndex = context.Parent.RuleIndex;

            // If the parent's rule is "start", the variable needs to be added to the class scope. Else we add it to the method's scope
            if (parentRuleIndex == CBluntParser.RULE_start)
            {
                // Check whether the variable exists already in the class scope. Give an error if it exists
                if (_classLevelVariablesDictionary.ContainsKey(variableName))
                {
                    Console.WriteLine("Syntax error on line " + context.Start.Line + "! Variable with name " + variableName + " already exists");
                    return 0;
                }

                // Add the new variable to the class level and initialize a dictionary to it
                _classLevelVariablesDictionary.Add(variableName, new Dictionary<string, string>());

                // Give the variable its properties
                var variableProperties = _classLevelVariablesDictionary[variableName];

                // Set the variable's type in the properties
                variableProperties.Add("type", variableType);
                
                // The value can be null
                variableProperties.Add("value", variableValue);
            }
            else
            {
                // Get the last node to iterate backwards over the linked list. Note that it is impossible for the linked list to be empty initially
                var currNode = _scopeLevelLinkedList.Last;

                // Variable for testing whether the variable was found in current or parent scope
                var varExistsInCurrOrPrevScope = false;

                // This loop will ALWAYS end, as it is certain there will exist at least 1 node, and a node will always have an end, aka. previous == null. Should there somehow not exist such a node (for debugging maybe), it will give an error
                // We need to iterate over all previous scopes and see if the variable is declared as that is not allowed in C#
                while (true)
                {
                    // Get the value (aka. dictionary) of the scope
                    var scopeVariables = currNode.Value;

                    // Stop the loop if the variable has been found in the current scope
                    if (scopeVariables.ContainsKey(variableName))
                    {
                        varExistsInCurrOrPrevScope = true;
                        break;
                    }

                    // If there exists no previous node, stop the loop
                    if (currNode.Previous == null)
                        break;

                    currNode = currNode.Previous;
                }

                // Check whether the variable was found
                if (varExistsInCurrOrPrevScope)
                {
                    Console.WriteLine("Syntax error on line " + context.Start.Line + "! Variable with name " + variableName + " already exists in current or parent scope");
                    return 0;
                }

                // Add the new variable to the last linked list node, and initialize a dictionary to it
                _scopeLevelLinkedList.Last.Value.Add(variableName, new Dictionary<string, string>());

                var variableProperties = _scopeLevelLinkedList.Last.Value[variableName];

                // Set the variable's type in the properties
                variableProperties.Add("type", variableType);

                // The value can be null
                variableProperties.Add("value", variableValue);
            }

            // If no expression is found, create the variable from the variableType with no value (null) and return, as to prevent parsing "expression"
            if (context.expression() == null) 
            {
                // Create variable with null value here

                return 0;
            }

            // Simplify retrieval of the expression's parameter using a variable. Note that this does not properly handle the grammar's way, as I intentionally omit "calculation*" for testing purposes
            var contextExpressionParameter = context.expression().parameter();

            /// TODO: It may be necessary to determine a better way to do this, potentially utilizing visitor more correctly as this MAY complicate things later
            string expectedParameterType = "";

            // Get the name of the expected parameter for potential error output further below
            if (contextExpressionParameter.STRING() != null)
                expectedParameterType = "text";

            if (contextExpressionParameter.NUMBER() != null)
                expectedParameterType = "number";

            if (contextExpressionParameter.TRUTH() != null)
            {
                expectedParameterType = "bool";
            }

            if (contextExpressionParameter.ID() != null)
            {
                /// TODO: ID requires specialized handling as it first has to be evaluated if the ID even exists, and what the type of ID is.
                expectedParameterType = "id";
            }

            if (contextExpressionParameter.functioncall() != null)
            {
                /// TODO: Add functioncall
            }

             // Evaluation of ID is here because we can simply stop if the ID exists and is of the same type. This can only be done when registering of variables is done
            if (expectedParameterType == "id")
            {

            }

            // Default case is omitted because it is not possible due to the parser
            switch (variableType)
            {
                case "text":
                    if (contextExpressionParameter.STRING() == null)
                        Console.WriteLine("Syntax error on line " + context.Start.Line + "! Expected text, got " + expectedParameterType);
                    break;

                case "number":
                    if (contextExpressionParameter.NUMBER() == null)
                        Console.WriteLine("Syntax error on line " + context.Start.Line + "! Expected number, got " + expectedParameterType);
                    break;

                case "bool":
                    if (contextExpressionParameter.TRUTH() == null)
                        Console.WriteLine("Syntax error on line " + context.Start.Line + "! Expected bool, got " + expectedParameterType);
                    break;
            }

            return 0;
        }

        public override int VisitFunction([NotNull]CBluntParser.FunctionContext context)
        {
#if DEBUG
            Console.WriteLine("VisitFunction");
#endif

            Visit(context.block());

            return 0;
        }

        public override int VisitBlock([NotNull]CBluntParser.BlockContext context)
        {
#if DEBUG
            Console.WriteLine("VisitBlock");
#endif

            // Create a new scope to the linked list
            _scopeLevelLinkedList.AddLast(new Dictionary<string, Dictionary<string, string>>());

             // Iterate over all potential statements in the block. There can be 0 statements here
            for (var i = 0; i < context.ChildCount; ++i)
            {
                if (context.statement(i) != null)
                    Visit(context.statement(i));
            }

            _scopeLevelLinkedList.RemoveLast();

            return 0;
        }

        public override int VisitExpression([NotNull]CBluntParser.ExpressionContext context)
        {
#if DEBUG
            Console.WriteLine("VisitExpression");
#endif
            if (context.parameter() != null)
                Visit(context.parameter());

            /*if (context.calculation() != null)
                Visit(context.calculation(0));*/

            return 0;
        }

        public override int VisitParameter([NotNull]CBluntParser.ParameterContext context)
        {
#if DEBUG
            Console.WriteLine("VisitParameter");
#endif

            if (context.ID() != null)
            {
                
            }

            return 0;
        }
    }
}
