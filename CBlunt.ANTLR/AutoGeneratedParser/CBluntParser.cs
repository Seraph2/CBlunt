//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CBlunt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CBlunt.ANTLR.AutoGeneratedParser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CBluntParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, ID=28, NUMBER=29, STRING=30, TRUTH=31, DIGIT=32, 
		LINECOMMENT=33, COMMENT=34, WS=35, OPERATOR=36;
	public const int
		RULE_start = 0, RULE_block = 1, RULE_function = 2, RULE_statement = 3, 
		RULE_functioncall = 4, RULE_iterative = 5, RULE_selective = 6, RULE_elsestmt = 7, 
		RULE_declaration = 8, RULE_variableedit = 9, RULE_expression = 10, RULE_calculation = 11, 
		RULE_condition = 12, RULE_logic = 13, RULE_relational = 14, RULE_conditional = 15, 
		RULE_variabletype = 16, RULE_functiontype = 17, RULE_parameter = 18, RULE_functionreturn = 19, 
		RULE_equals = 20;
	public static readonly string[] ruleNames = {
		"start", "block", "function", "statement", "functioncall", "iterative", 
		"selective", "elsestmt", "declaration", "variableedit", "expression", 
		"calculation", "condition", "logic", "relational", "conditional", "variabletype", 
		"functiontype", "parameter", "functionreturn", "equals"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "','", "')'", "';'", "'while'", "'for'", "'if'", 
		"'else'", "'='", "'!'", "'=='", "'>='", "'<='", "'>'", "'<'", "'!='", 
		"'||'", "'&&'", "'or'", "'and'", "'number'", "'text'", "'bool'", "'void'", 
		"'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "ID", "NUMBER", "STRING", "TRUTH", "DIGIT", "LINECOMMENT", 
		"COMMENT", "WS", "OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CBlunt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CBluntParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CBluntParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CBluntParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 44;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 42; function();
					}
					break;
				case 2:
					{
					State = 43; declaration();
					}
					break;
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(T__0);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__26) | (1L << ID))) != 0)) {
				{
				{
				State = 49; statement();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctiontypeContext functiontype() {
			return GetRuleContext<FunctiontypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(CBluntParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CBluntParser.ID, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariabletypeContext[] variabletype() {
			return GetRuleContexts<VariabletypeContext>();
		}
		public VariabletypeContext variabletype(int i) {
			return GetRuleContext<VariabletypeContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; functiontype();
			State = 58; Match(ID);
			State = 59; Match(T__2);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24))) != 0)) {
				{
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 60; variabletype();
						State = 61; Match(ID);
						State = 62; Match(T__3);
						}
						} 
					}
					State = 68;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 69; variabletype();
				State = 70; Match(ID);
				}
			}

			State = 74; Match(T__4);
			State = 75; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IterativeContext iterative() {
			return GetRuleContext<IterativeContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public VariableeditContext variableedit() {
			return GetRuleContext<VariableeditContext>(0);
		}
		public FunctionreturnContext functionreturn() {
			return GetRuleContext<FunctionreturnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case T__23:
			case T__24:
			case T__26:
			case ID:
				{
				{
				State = 81;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 77; declaration();
					}
					break;
				case 2:
					{
					State = 78; functioncall();
					}
					break;
				case 3:
					{
					State = 79; variableedit();
					}
					break;
				case 4:
					{
					State = 80; functionreturn();
					}
					break;
				}
				State = 83; Match(T__5);
				}
				}
				break;
			case T__6:
			case T__7:
				{
				State = 85; iterative();
				}
				break;
			case T__8:
				{
				State = 86; selective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 8, RULE_functioncall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(ID);
			State = 90; Match(T__2);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING) | (1L << TRUTH))) != 0)) {
				{
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 91; parameter();
						State = 92; Match(T__3);
						}
						} 
					}
					State = 98;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 99; parameter();
				}
			}

			State = 102; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableeditContext[] variableedit() {
			return GetRuleContexts<VariableeditContext>();
		}
		public VariableeditContext variableedit(int i) {
			return GetRuleContext<VariableeditContext>(i);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_iterative);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(T__6);
				State = 105; Match(T__2);
				State = 106; condition();
				State = 107; Match(T__4);
				State = 108; block();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; Match(T__7);
				State = 111; Match(T__2);
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__22:
				case T__23:
				case T__24:
					{
					State = 112; declaration();
					}
					break;
				case ID:
					{
					State = 113; variableedit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 116; Match(T__5);
				State = 117; condition();
				State = 118; Match(T__5);
				State = 119; variableedit();
				State = 120; Match(T__4);
				State = 121; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_selective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(T__8);
			State = 126; Match(T__2);
			State = 127; condition();
			State = 128; Match(T__4);
			State = 129; block();
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 130; elsestmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_elsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(T__9);
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 134; block();
				}
				break;
			case T__8:
				{
				State = 135; selective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public VariabletypeContext variabletype() {
			return GetRuleContext<VariabletypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; variabletype();
			State = 139; Match(ID);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 140; Match(T__10);
				State = 141; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableeditContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public EqualsContext equals() {
			return GetRuleContext<EqualsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableeditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableedit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableedit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableeditContext variableedit() {
		VariableeditContext _localctx = new VariableeditContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableedit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(ID);
			State = 145; equals();
			State = 146; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		int _la;
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; parameter();
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPERATOR) {
					{
					{
					State = 149; calculation();
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CBluntParser.OPERATOR, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		CalculationContext _localctx = new CalculationContext(Context, State);
		EnterRule(_localctx, 22, RULE_calculation);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(OPERATOR);
				State = 159; parameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160; Match(OPERATOR);
				State = 161; Match(T__2);
				State = 162; parameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; Match(OPERATOR);
				State = 164; parameter();
				State = 165; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public LogicContext logic() {
			return GetRuleContext<LogicContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ConditionalContext[] conditional() {
			return GetRuleContexts<ConditionalContext>();
		}
		public ConditionalContext conditional(int i) {
			return GetRuleContext<ConditionalContext>(i);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 169; Match(T__11);
				}
			}

			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 172; logic();
				}
				break;
			case 2:
				{
				State = 173; Match(ID);
				}
				break;
			}
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 176; conditional();
					State = 177; condition();
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelationalContext relational() {
			return GetRuleContext<RelationalContext>(0);
		}
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 26, RULE_logic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 184; expression();
			State = 185; relational();
			State = 186; expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalContext : ParserRuleContext {
		public RelationalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalContext relational() {
		RelationalContext _localctx = new RelationalContext(Context, State);
		EnterRule(_localctx, 28, RULE_relational);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 30, RULE_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariabletypeContext : ParserRuleContext {
		public VariabletypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variabletype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariabletype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariabletypeContext variabletype() {
		VariabletypeContext _localctx = new VariabletypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_variabletype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontypeContext : ParserRuleContext {
		public VariabletypeContext variabletype() {
			return GetRuleContext<VariabletypeContext>(0);
		}
		public FunctiontypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiontype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiontypeContext functiontype() {
		FunctiontypeContext _localctx = new FunctiontypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_functiontype);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case T__23:
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; variabletype();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(CBluntParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(CBluntParser.NUMBER, 0); }
		public ITerminalNode TRUTH() { return GetToken(CBluntParser.TRUTH, 0); }
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200; Match(TRUTH);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 201; Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 202; functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionreturnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionreturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionreturn; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionreturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionreturnContext functionreturn() {
		FunctionreturnContext _localctx = new FunctionreturnContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionreturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(T__26);
			State = 206; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualsContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CBluntParser.OPERATOR, 0); }
		public EqualsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualsContext equals() {
		EqualsContext _localctx = new EqualsContext(Context, State);
		EnterRule(_localctx, 40, RULE_equals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATOR) {
				{
				State = 208; Match(OPERATOR);
				}
			}

			State = 211; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xD8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '/', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\x30', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x35', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x38', '\v', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x43', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x46', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'T', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Z', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x61', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x64', '\v', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'g', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'u', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x86', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x8B', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x91', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x99', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\x9C', '\v', '\f', '\x3', '\f', '\x5', 
		'\f', '\x9F', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xAA', '\n', '\r', '\x3', '\xE', '\x5', '\xE', '\xAD', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB1', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xB6', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xB9', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xC7', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xCE', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', '\x16', 
		'\xD4', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x2', 
		'\x2', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', '\x2', '\x5', '\x3', '\x2', '\xF', '\x14', '\x3', '\x2', '\x15', 
		'\x18', '\x3', '\x2', '\x19', '\x1B', '\x2', '\xE0', '\x2', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x32', '\x3', '\x2', '\x2', '\x2', '\x6', 
		';', '\x3', '\x2', '\x2', '\x2', '\b', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\n', '[', '\x3', '\x2', '\x2', '\x2', '\f', '}', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x10', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', ' ', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xC2', '\x3', '\x2', '\x2', '\x2', '$', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xCD', '\x3', '\x2', '\x2', '\x2', '(', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xD3', '\x3', '\x2', '\x2', '\x2', ',', '/', 
		'\x5', '\x6', '\x4', '\x2', '-', '/', '\x5', '\x12', '\n', '\x2', '.', 
		',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x36', '\a', '\x3', '\x2', '\x2', '\x33', 
		'\x35', '\x5', '\b', '\x5', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '\x4', '\x2', '\x2', ':', '\x5', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x5', '$', '\x13', '\x2', '<', '=', '\a', '\x1E', 
		'\x2', '\x2', '=', 'J', '\a', '\x5', '\x2', '\x2', '>', '?', '\x5', '\"', 
		'\x12', '\x2', '?', '@', '\a', '\x1E', '\x2', '\x2', '@', '\x41', '\a', 
		'\x6', '\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', '\"', '\x12', '\x2', 
		'H', 'I', '\a', '\x1E', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x44', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\a', '\x2', 
		'\x2', 'M', 'N', '\x5', '\x4', '\x3', '\x2', 'N', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'T', '\x5', '\x12', '\n', '\x2', 'P', 'T', '\x5', '\n', 
		'\x6', '\x2', 'Q', 'T', '\x5', '\x14', '\v', '\x2', 'R', 'T', '\x5', '(', 
		'\x15', '\x2', 'S', 'O', '\x3', '\x2', '\x2', '\x2', 'S', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\b', '\x2', '\x2', 'V', 'Z', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x5', 
		'\f', '\a', '\x2', 'X', 'Z', '\x5', '\xE', '\b', '\x2', 'Y', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\t', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\a', '\x1E', '\x2', '\x2', '\\', '\x66', '\a', '\x5', '\x2', '\x2', ']', 
		'^', '\x5', '&', '\x14', '\x2', '^', '_', '\a', '\x6', '\x2', '\x2', '_', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x64', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x65', 'g', '\x5', '&', '\x14', '\x2', '\x66', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\a', '\a', '\x2', '\x2', 'i', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\a', '\t', '\x2', '\x2', 'k', 'l', '\a', 
		'\x5', '\x2', '\x2', 'l', 'm', '\x5', '\x1A', '\xE', '\x2', 'm', 'n', 
		'\a', '\a', '\x2', '\x2', 'n', 'o', '\x5', '\x4', '\x3', '\x2', 'o', '~', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\n', '\x2', '\x2', 'q', 't', 
		'\a', '\x5', '\x2', '\x2', 'r', 'u', '\x5', '\x12', '\n', '\x2', 's', 
		'u', '\x5', '\x14', '\v', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '\b', '\x2', '\x2', 'w', 'x', '\x5', '\x1A', '\xE', '\x2', 
		'x', 'y', '\a', '\b', '\x2', '\x2', 'y', 'z', '\x5', '\x14', '\v', '\x2', 
		'z', '{', '\a', '\a', '\x2', '\x2', '{', '|', '\x5', '\x4', '\x3', '\x2', 
		'|', '~', '\x3', '\x2', '\x2', '\x2', '}', 'j', '\x3', '\x2', '\x2', '\x2', 
		'}', 'p', '\x3', '\x2', '\x2', '\x2', '~', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\a', '\v', '\x2', '\x2', '\x80', '\x81', '\a', 
		'\x5', '\x2', '\x2', '\x81', '\x82', '\x5', '\x1A', '\xE', '\x2', '\x82', 
		'\x83', '\a', '\a', '\x2', '\x2', '\x83', '\x85', '\x5', '\x4', '\x3', 
		'\x2', '\x84', '\x86', '\x5', '\x10', '\t', '\x2', '\x85', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\a', '\f', '\x2', 
		'\x2', '\x88', '\x8B', '\x5', '\x4', '\x3', '\x2', '\x89', '\x8B', '\x5', 
		'\xE', '\b', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\x5', '\"', '\x12', '\x2', '\x8D', '\x90', '\a', 
		'\x1E', '\x2', '\x2', '\x8E', '\x8F', '\a', '\r', '\x2', '\x2', '\x8F', 
		'\x91', '\x5', '\x16', '\f', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x1E', '\x2', '\x2', '\x93', 
		'\x94', '\x5', '*', '\x16', '\x2', '\x94', '\x95', '\x5', '\x16', '\f', 
		'\x2', '\x95', '\x15', '\x3', '\x2', '\x2', '\x2', '\x96', '\x9A', '\x5', 
		'&', '\x14', '\x2', '\x97', '\x99', '\x5', '\x18', '\r', '\x2', '\x98', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\x5', '&', '\x14', 
		'\x2', '\x9E', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '&', '\x2', '\x2', '\xA1', '\xAA', '\x5', '&', '\x14', '\x2', 
		'\xA2', '\xA3', '\a', '&', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x5', 
		'\x2', '\x2', '\xA4', '\xAA', '\x5', '&', '\x14', '\x2', '\xA5', '\xA6', 
		'\a', '&', '\x2', '\x2', '\xA6', '\xA7', '\x5', '&', '\x14', '\x2', '\xA7', 
		'\xA8', '\a', '\a', '\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\a', '\xE', '\x2', 
		'\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB1', '\x5', '\x1C', '\xF', '\x2', '\xAF', '\xB1', '\a', '\x1E', '\x2', 
		'\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\x5', ' ', '\x11', '\x2', '\xB3', '\xB4', '\x5', '\x1A', '\xE', 
		'\x2', '\xB4', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x16', '\f', '\x2', '\xBB', 
		'\xBC', '\x5', '\x1E', '\x10', '\x2', '\xBC', '\xBD', '\x5', '\x16', '\f', 
		'\x2', '\xBD', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\t', 
		'\x2', '\x2', '\x2', '\xBF', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\t', '\x3', '\x2', '\x2', '\xC1', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\t', '\x4', '\x2', '\x2', '\xC3', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC7', '\x5', '\"', '\x12', '\x2', '\xC5', '\xC7', 
		'\a', '\x1C', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xCE', '\a', ' ', '\x2', '\x2', '\xC9', '\xCE', 
		'\a', '\x1F', '\x2', '\x2', '\xCA', '\xCE', '\a', '!', '\x2', '\x2', '\xCB', 
		'\xCE', '\a', '\x1E', '\x2', '\x2', '\xCC', '\xCE', '\x5', '\n', '\x6', 
		'\x2', '\xCD', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\'', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x1D', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x16', '\f', '\x2', '\xD1', 
		')', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\a', '&', '\x2', '\x2', 
		'\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', 
		'\a', '\r', '\x2', '\x2', '\xD6', '+', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'.', '\x30', '\x36', '\x44', 'J', 'S', 'Y', '\x62', '\x66', 't', '}', 
		'\x85', '\x8A', '\x90', '\x9A', '\x9E', '\xA9', '\xAC', '\xB0', '\xB7', 
		'\xC6', '\xCD', '\xD3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CBlunt.ANTLR.AutoGeneratedParser
