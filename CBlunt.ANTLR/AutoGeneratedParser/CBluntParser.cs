//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CBlunt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CBlunt.ANTLR.AutoGeneratedParser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CBluntParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		NUMBER=32, STRING=33, ID=34, DIGIT=35, WS=36;
	public const int
		RULE_start = 0, RULE_function = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_idcall = 4, RULE_functioncall = 5, RULE_iterative = 6, RULE_selective = 7, 
		RULE_declaration = 8, RULE_idedit = 9, RULE_expression = 10, RULE_condition = 11, 
		RULE_logic = 12, RULE_type = 13, RULE_parameter = 14;
	public static readonly string[] ruleNames = {
		"start", "function", "statements", "statement", "idcall", "functioncall", 
		"iterative", "selective", "declaration", "idedit", "expression", "condition", 
		"logic", "type", "parameter"
	};

	private static readonly string[] _LiteralNames = {
		null, "'void'", "'Main'", "'('", "')'", "'{'", "'}'", "','", "';'", "'['", 
		"']'", "'while'", "'for'", "'if'", "'='", "'array'", "'*'", "'/'", "'+'", 
		"'-'", "'=='", "'>='", "'<='", "'>'", "'<'", "'!='", "'||'", "'^^'", "'&&'", 
		"'number'", "'string'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NUMBER", "STRING", "ID", 
		"DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CBlunt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CBluntParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CBluntParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CBluntParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(T__0);
			State = 31; Match(T__1);
			State = 32; Match(T__2);
			State = 33; Match(T__3);
			State = 34; Match(T__4);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				State = 35; statements();
				}
			}

			State = 38; Match(T__5);
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) {
				{
				State = 41;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 39; function();
					}
					break;
				case 2:
					{
					State = 40; declaration();
					}
					break;
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(CBluntParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CBluntParser.ID, i);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; type();
			State = 47; Match(ID);
			State = 48; Match(T__2);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) {
				{
				State = 49; type();
				State = 50; Match(ID);
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 51; Match(T__6);
					State = 52; type();
					State = 53; Match(ID);
					}
					}
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 62; Match(T__3);
			State = 63; Match(T__4);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				State = 64; statements();
				}
			}

			State = 67; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; statement();
				State = 70; statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public IdeditContext idedit() {
			return GetRuleContext<IdeditContext>(0);
		}
		public IterativeContext iterative() {
			return GetRuleContext<IterativeContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__28:
			case T__29:
			case T__30:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 75; declaration();
					}
					break;
				case 2:
					{
					State = 76; functioncall();
					}
					break;
				case 3:
					{
					State = 77; idedit();
					}
					break;
				}
				State = 80; Match(T__7);
				}
				break;
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; iterative();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83; selective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdcallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ITerminalNode DIGIT() { return GetToken(CBluntParser.DIGIT, 0); }
		public IdcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idcall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdcall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdcallContext idcall() {
		IdcallContext _localctx = new IdcallContext(Context, State);
		EnterRule(_localctx, 8, RULE_idcall);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(ID);
				State = 88; Match(T__8);
				State = 89; Match(DIGIT);
				State = 90; Match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(ID);
			State = 94; Match(T__2);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				State = 95; parameter();
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 96; Match(T__6);
					State = 97; parameter();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 105; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 12, RULE_iterative);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(T__10);
				State = 108; Match(T__2);
				State = 109; condition();
				State = 110; Match(T__3);
				State = 111; Match(T__4);
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
					{
					State = 112; statements();
					}
				}

				State = 115; Match(T__5);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; Match(T__11);
				State = 118; Match(T__2);
				State = 119; declaration();
				State = 120; Match(T__7);
				State = 121; condition();
				State = 122; Match(T__7);
				State = 123; expression(0);
				State = 124; Match(T__3);
				State = 125; Match(T__4);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
					{
					{
					State = 126; statement();
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 132; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_selective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(T__12);
			State = 137; Match(T__2);
			State = 138; condition();
			State = 139; Match(T__3);
			State = 140; Match(T__4);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				State = 141; statements();
				}
			}

			State = 144; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; type();
				State = 147; Match(ID);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 148; Match(T__13);
					State = 149; expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; type();
				State = 153; Match(T__14);
				State = 154; Match(ID);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 155; Match(T__13);
					State = 156; Match(T__4);
					State = 162;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 157; expression(0);
							State = 158; Match(T__6);
							}
							} 
						}
						State = 164;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					}
					State = 165; expression(0);
					State = 166; Match(T__5);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdeditContext : ParserRuleContext {
		public IdcallContext idcall() {
			return GetRuleContext<IdcallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdeditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idedit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdedit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdeditContext idedit() {
		IdeditContext _localctx = new IdeditContext(Context, State);
		EnterRule(_localctx, 18, RULE_idedit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; idcall();
			State = 173; Match(T__13);
			State = 174; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 177; Match(T__2);
				State = 178; expression(0);
				State = 179; Match(T__3);
				}
				break;
			case NUMBER:
			case STRING:
			case ID:
				{
				State = 181; parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 190;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 184;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 185;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 186; expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 188;
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 189; expression(4);
						}
						break;
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicContext[] logic() {
			return GetRuleContexts<LogicContext>();
		}
		public LogicContext logic(int i) {
			return GetRuleContext<LogicContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 195; expression(0);
				State = 196; logic();
				State = 197; expression(0);
				}
				break;
			case 2:
				{
				State = 199; Match(ID);
				}
				break;
			}
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 202; logic();
					State = 203; condition();
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicContext : ParserRuleContext {
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 24, RULE_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IdcallContext idcall() {
			return GetRuleContext<IdcallContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CBluntParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(CBluntParser.NUMBER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; idcall();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216; Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xDE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\'', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', ',', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '/', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		':', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '=', '\v', '\x3', '\x5', 
		'\x3', '?', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x44', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'L', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Q', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'W', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '^', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x65', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'h', '\v', '\a', '\x5', '\a', 'j', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 't', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x82', '\n', '\b', '\f', '\b', '\xE', '\b', '\x85', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x89', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x91', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x99', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xA3', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\xA6', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xAB', '\n', '\n', '\x5', '\n', '\xAD', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xB9', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\xC1', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xC4', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xCB', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xD0', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xD3', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xDC', '\n', '\x10', '\x3', '\x10', '\x2', '\x3', '\x16', '\x11', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', '\x2', '\x6', '\x3', '\x2', '\x12', '\x13', 
		'\x3', '\x2', '\x14', '\x15', '\x3', '\x2', '\x16', '\x1E', '\x4', '\x2', 
		'\x3', '\x3', '\x1F', '!', '\x2', '\xEB', '\x2', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x30', '\x3', '\x2', '\x2', '\x2', '\x6', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'V', '\x3', '\x2', '\x2', '\x2', '\n', ']', '\x3', 
		'\x2', '\x2', '\x2', '\f', '_', '\x3', '\x2', '\x2', '\x2', '\xE', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x18', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\a', '\x3', '\x2', '\x2', '!', '\"', '\a', '\x4', 
		'\x2', '\x2', '\"', '#', '\a', '\x5', '\x2', '\x2', '#', '$', '\a', '\x6', 
		'\x2', '\x2', '$', '&', '\a', '\a', '\x2', '\x2', '%', '\'', '\x5', '\x6', 
		'\x4', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '-', 
		'\a', '\b', '\x2', '\x2', ')', ',', '\x5', '\x4', '\x3', '\x2', '*', ',', 
		'\x5', '\x12', '\n', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', 
		'*', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x5', '\x1C', '\xF', '\x2', '\x31', '\x32', '\a', 
		'$', '\x2', '\x2', '\x32', '>', '\a', '\x5', '\x2', '\x2', '\x33', '\x34', 
		'\x5', '\x1C', '\xF', '\x2', '\x34', ';', '\a', '$', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\t', '\x2', '\x2', '\x36', '\x37', '\x5', '\x1C', '\xF', 
		'\x2', '\x37', '\x38', '\a', '$', '\x2', '\x2', '\x38', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x35', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', '=', 
		';', '\x3', '\x2', '\x2', '\x2', '>', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '\x6', '\x2', '\x2', '\x41', '\x43', '\a', '\a', '\x2', 
		'\x2', '\x42', '\x44', '\x5', '\x6', '\x4', '\x2', '\x43', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\b', '\x2', 
		'\x2', '\x46', '\x5', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', '\b', 
		'\x5', '\x2', 'H', 'I', '\x5', '\x6', '\x4', '\x2', 'I', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'L', '\x5', '\b', '\x5', '\x2', 'K', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'Q', '\x5', '\x12', '\n', '\x2', 'N', 'Q', '\x5', 
		'\f', '\a', '\x2', 'O', 'Q', '\x5', '\x14', '\v', '\x2', 'P', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', 
		'\n', '\x2', '\x2', 'S', 'W', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x5', 
		'\xE', '\b', '\x2', 'U', 'W', '\x5', '\x10', '\t', '\x2', 'V', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'W', '\t', '\x3', '\x2', '\x2', '\x2', 'X', '^', 
		'\a', '$', '\x2', '\x2', 'Y', 'Z', '\a', '$', '\x2', '\x2', 'Z', '[', 
		'\a', '\v', '\x2', '\x2', '[', '\\', '\a', '%', '\x2', '\x2', '\\', '^', 
		'\a', '\f', '\x2', '\x2', ']', 'X', '\x3', '\x2', '\x2', '\x2', ']', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '^', '\v', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\a', '$', '\x2', '\x2', '`', 'i', '\a', '\x5', '\x2', '\x2', '\x61', 
		'\x66', '\x5', '\x1E', '\x10', '\x2', '\x62', '\x63', '\a', '\t', '\x2', 
		'\x2', '\x63', '\x65', '\x5', '\x1E', '\x10', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\x61', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', 
		'\x6', '\x2', '\x2', 'l', '\r', '\x3', '\x2', '\x2', '\x2', 'm', 'n', 
		'\a', '\r', '\x2', '\x2', 'n', 'o', '\a', '\x5', '\x2', '\x2', 'o', 'p', 
		'\x5', '\x18', '\r', '\x2', 'p', 'q', '\a', '\x6', '\x2', '\x2', 'q', 
		's', '\a', '\a', '\x2', '\x2', 'r', 't', '\x5', '\x6', '\x4', '\x2', 's', 
		'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\b', '\x2', '\x2', 
		'v', '\x89', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\xE', '\x2', 
		'\x2', 'x', 'y', '\a', '\x5', '\x2', '\x2', 'y', 'z', '\x5', '\x12', '\n', 
		'\x2', 'z', '{', '\a', '\n', '\x2', '\x2', '{', '|', '\x5', '\x18', '\r', 
		'\x2', '|', '}', '\a', '\n', '\x2', '\x2', '}', '~', '\x5', '\x16', '\f', 
		'\x2', '~', '\x7F', '\a', '\x6', '\x2', '\x2', '\x7F', '\x83', '\a', '\a', 
		'\x2', '\x2', '\x80', '\x82', '\x5', '\b', '\x5', '\x2', '\x81', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\b', '\x2', '\x2', 
		'\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x88', 'w', '\x3', '\x2', '\x2', '\x2', '\x89', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\xF', '\x2', '\x2', 
		'\x8B', '\x8C', '\a', '\x5', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x18', 
		'\r', '\x2', '\x8D', '\x8E', '\a', '\x6', '\x2', '\x2', '\x8E', '\x90', 
		'\a', '\a', '\x2', '\x2', '\x8F', '\x91', '\x5', '\x6', '\x4', '\x2', 
		'\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\a', '\b', '\x2', '\x2', '\x93', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\x1C', '\xF', '\x2', '\x95', '\x98', '\a', '$', 
		'\x2', '\x2', '\x96', '\x97', '\a', '\x10', '\x2', '\x2', '\x97', '\x99', 
		'\x5', '\x16', '\f', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\x5', '\x1C', '\xF', '\x2', '\x9B', '\x9C', 
		'\a', '\x11', '\x2', '\x2', '\x9C', '\xAA', '\a', '$', '\x2', '\x2', '\x9D', 
		'\x9E', '\a', '\x10', '\x2', '\x2', '\x9E', '\xA4', '\a', '\a', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x16', '\f', '\x2', '\xA0', '\xA1', '\a', 
		'\t', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x16', '\f', 
		'\x2', '\xA8', '\xA9', '\a', '\b', '\x2', '\x2', '\xA9', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\x94', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\x5', '\n', '\x6', '\x2', '\xAF', '\xB0', '\a', '\x10', '\x2', 
		'\x2', '\xB0', '\xB1', '\x5', '\x16', '\f', '\x2', '\xB1', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB3', '\b', '\f', '\x1', '\x2', '\xB3', 
		'\xB4', '\a', '\x5', '\x2', '\x2', '\xB4', '\xB5', '\x5', '\x16', '\f', 
		'\x2', '\xB5', '\xB6', '\a', '\x6', '\x2', '\x2', '\xB6', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB9', '\x5', '\x1E', '\x10', '\x2', '\xB8', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\f', 
		'\x6', '\x2', '\x2', '\xBB', '\xBC', '\t', '\x2', '\x2', '\x2', '\xBC', 
		'\xC1', '\x5', '\x16', '\f', '\a', '\xBD', '\xBE', '\f', '\x5', '\x2', 
		'\x2', '\xBE', '\xBF', '\t', '\x3', '\x2', '\x2', '\xBF', '\xC1', '\x5', 
		'\x16', '\f', '\x6', '\xC0', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x16', '\f', 
		'\x2', '\xC6', '\xC7', '\x5', '\x1A', '\xE', '\x2', '\xC7', '\xC8', '\x5', 
		'\x16', '\f', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCB', '\a', '$', '\x2', '\x2', '\xCA', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\x1A', '\xE', '\x2', '\xCD', 
		'\xCE', '\x5', '\x18', '\r', '\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\t', 
		'\x4', '\x2', '\x2', '\xD5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\t', '\x5', '\x2', '\x2', '\xD7', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xDC', '\x5', '\n', '\x6', '\x2', '\xD9', '\xDC', '\a', 
		'#', '\x2', '\x2', '\xDA', '\xDC', '\a', '\"', '\x2', '\x2', '\xDB', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '&', '+', '-', ';', '>', '\x43', 'K', 'P', 'V', 
		']', '\x66', 'i', 's', '\x83', '\x88', '\x90', '\x98', '\xA4', '\xAA', 
		'\xAC', '\xB8', '\xC0', '\xC2', '\xCA', '\xD1', '\xDB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CBlunt.ANTLR.AutoGeneratedParser
