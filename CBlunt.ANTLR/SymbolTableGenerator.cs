using System;
using System.Collections.Generic;
using System.Linq;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using CBlunt.ANTLR.AutoGeneratedParser;
using System.Reflection;

namespace CBlunt.ANTLR
{
    class SymbolTableGenerator : CBluntBaseVisitor<int>
    {
        public override int VisitStart([NotNull] CBluntParser.StartContext context)
        {
#if DEBUG
            Console.WriteLine("Beginning symbol table generation");
            Console.WriteLine("VisitStart");
#endif



#if DEBUG
            Console.WriteLine("Finished symbol table generation");
#endif
            return 0;
        }

        public override int VisitBlock([NotNull] CBluntParser.BlockContext context)
        {
            return base.VisitBlock(context);
        }
    }

    /*
     * Store for a variable's properties
     */
    class VariableProperties
    {
        // The type of the variable (number, text, bool etc.)
        public string Type { get; set; }

        // The value of the variable (true, false, 0, "test" etc.)
        /// REMOVE
        public string Value { get; set; }

        // Determine whether the variable has been initialized or not (aka null)
        // It is impossible to initialize a variable with null in CBlunt, therefore this only applies to ex:
        // number a;
        public bool Initialized { get; set; }

        // If not specified, the value of the variable is null
        public VariableProperties(string type, string value = null)
        {
            // Set the variable's type
            Type = type;

            // Set the variable's value
            /// REMOVE
            Value = value;

            // If it is found that the variable is initialized with a value, set its initialization flag
            /// REMOVE
            if (value != null)
                Initialized = true;
        }
    }

    /*
    * Store for a method's properties
    */
    class MethodProperties
    {
        // The (return) type of the function
        public string Type { get; set; }

        // The list of parameter types this method takes (number, bool, text)
        public List<string> ParameterTypes = new List<string>();

        // Determines if the method has been used somewhere in code, eg: number a = Test(123);
        /// REMOVE
        public bool Discovered { get; set; }

        // Determines whether there has been a declaration for the method
        /// REMOVE
        public bool Declared { get; set; }

        // A list of nodes that has discovered this function before it was properly declared
        /// REMOVE
        public List<DiscoveryNode> DiscoveryNodes = new List<DiscoveryNode>();

        // A node signifying a discovery of the method. Once the method has been declared, all nodes will be iterated over from start to end to verify if they followed the rules of the method
        /// REMOVE
        public class DiscoveryNode
        {
            // The line the method was discovered on
            int Line { get; set; }

            // The type of the discovered method, if there exists one. This will be null if the method in code is not used to return a value
            string Type { get; set; }

            // The types of parameters th
            List<string> ParameterTypes = new List<string>();
        }
    }
}