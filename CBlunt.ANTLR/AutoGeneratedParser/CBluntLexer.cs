//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CBlunt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CBlunt.ANTLR.AutoGeneratedParser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CBluntLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NUMBER=7, STRING=8, ID=9, 
		DIGIT=10, WS=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NUMBER", "STRING", "ID", 
		"DIGIT", "WS"
	};


	public CBluntLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CBluntLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'array'", "'='", "';'", "'number'", "'string'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NUMBER", "STRING", "ID", "DIGIT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CBlunt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CBluntLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\r', '\x64', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x5', '\b', '\x38', '\n', '\b', '\x3', '\b', 
		'\x6', '\b', ';', '\n', '\b', '\r', '\b', '\xE', '\b', '<', '\x3', '\b', 
		'\x3', '\b', '\x6', '\b', '\x41', '\n', '\b', '\r', '\b', '\xE', '\b', 
		'\x42', '\x5', '\b', '\x45', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'K', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'N', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'T', '\n', '\n', '\f', '\n', '\xE', '\n', 'W', '\v', '\n', '\x3', 
		'\v', '\x6', '\v', 'Z', '\n', '\v', '\r', '\v', '\xE', '\v', '[', '\x3', 
		'\f', '\x6', '\f', '_', '\n', '\f', '\r', '\f', '\xE', '\f', '`', '\x3', 
		'\f', '\x3', '\f', '\x2', '\x2', '\r', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', 
		'\x13', '\v', '\x15', '\f', '\x17', '\r', '\x3', '\x2', '\b', '\x3', '\x2', 
		'\x32', ';', '\x6', '\x2', '\f', '\f', '\xF', '\xF', '$', '$', '^', '^', 
		'\x4', '\x2', '$', '$', '^', '^', '\x5', '\x2', '\x43', '\\', '\x61', 
		'\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', 
		'\x61', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', 
		'\x2', 'l', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\a', '!', '\x3', '\x2', '\x2', 
		'\x2', '\t', '#', '\x3', '\x2', '\x2', '\x2', '\v', '*', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x13', 'Q', '\x3', '\x2', '\x2', '\x2', '\x15', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '^', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', 
		'\x63', '\x2', '\x2', '\x1A', '\x1B', '\a', 't', '\x2', '\x2', '\x1B', 
		'\x1C', '\a', 't', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x63', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '{', '\x2', '\x2', '\x1E', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\a', '?', '\x2', '\x2', ' ', '\x6', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '=', '\x2', '\x2', '\"', 
		'\b', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', 'p', '\x2', '\x2', '$', 
		'%', '\a', 'w', '\x2', '\x2', '%', '&', '\a', 'o', '\x2', '\x2', '&', 
		'\'', '\a', '\x64', '\x2', '\x2', '\'', '(', '\a', 'g', '\x2', '\x2', 
		'(', ')', '\a', 't', '\x2', '\x2', ')', '\n', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\a', 'u', '\x2', '\x2', '+', ',', '\a', 'v', '\x2', '\x2', 
		',', '-', '\a', 't', '\x2', '\x2', '-', '.', '\a', 'k', '\x2', '\x2', 
		'.', '/', '\a', 'p', '\x2', '\x2', '/', '\x30', '\a', 'i', '\x2', '\x2', 
		'\x30', '\f', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 'x', '\x2', 
		'\x2', '\x32', '\x33', '\a', 'q', '\x2', '\x2', '\x33', '\x34', '\a', 
		'k', '\x2', '\x2', '\x34', '\x35', '\a', '\x66', '\x2', '\x2', '\x35', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\a', '/', '\x2', '\x2', 
		'\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\t', 
		'\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x3', '\x2', '\x2', '\x2', '=', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\a', '\x30', '\x2', '\x2', '?', '\x41', '\t', '\x2', '\x2', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '>', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x10', '\x3', '\x2', '\x2', '\x2', '\x46', 'L', 
		'\a', '$', '\x2', '\x2', 'G', 'K', '\n', '\x3', '\x2', '\x2', 'H', 'I', 
		'\a', '^', '\x2', '\x2', 'I', 'K', '\t', '\x4', '\x2', '\x2', 'J', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 
		'N', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '$', '\x2', '\x2', 
		'P', '\x12', '\x3', '\x2', '\x2', '\x2', 'Q', 'U', '\t', '\x5', '\x2', 
		'\x2', 'R', 'T', '\t', '\x6', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\x14', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\t', '\x2', 
		'\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\x16', '\x3', '\x2', '\x2', '\x2', ']', '_', 
		'\t', '\a', '\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\b', '\f', '\x2', '\x2', '\x63', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x2', '\x37', '<', '\x42', '\x44', 'J', 'L', 
		'U', '[', '`', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CBlunt.ANTLR.AutoGeneratedParser
