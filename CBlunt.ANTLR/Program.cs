using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Antlr4.Runtime;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using CBlunt.ANTLR.AutoGeneratedParser;
using System.Threading;

namespace CBlunt.ANTLR
{
    class Program
    {
        private static FileSystemWatcher _watcher;
        private static string FileText;
        private static string ScriptDirectory = "scripts";
        private static string OutputDirectory = "";

        public static void Main(string[] args)
        {
            //Mostly used to check whether the program is compiled directly or run from a batch.
            if (args.Length > 0)
            {
                ScriptDirectory = args[0];
                OutputDirectory = args[1];
            }

            LoadScripts(ScriptDirectory);

            InitializeFileSystemWatcher(ScriptDirectory);
#if DEBUG
            // Continually loop forever to keep the program (and watcher) alive
            while (true)
            {
                // Reduce CPU usage marginally
                Thread.Sleep(1);
            }
#endif
        }

        private static CBluntParser CreateParser(string input)
        {
            // Create Lexer
            CBluntLexer lexer = new CBluntLexer(new AntlrInputStream(input));

            // Remove default error listener, add our own
            lexer.RemoveErrorListeners();
            lexer.AddErrorListener(new ThrowingErrorListener<int>());

            CBluntParser parser = new CBluntParser(new CommonTokenStream(lexer));

            parser.RemoveErrorListeners();
            parser.AddErrorListener(new ThrowingErrorListener<IToken>());

            return parser;
        }

        private static void GenerateSymbolTable()
        {
            var parser = CreateParser(FileText);

            // Generate symbol table
            new SymbolTableGenerator().Visit(parser.start());
        }

        private static void CheckSemantics()
        {
            var parser = CreateParser(FileText);

            // Check semantics
            new SemanticChecker().Visit(parser.start());
        }

        private static void GenerateCode(string filePath)
        {
            var parser = CreateParser(FileText);

            // Generate code
            new CodeGenerator(filePath, OutputDirectory).Visit(parser.start());
        }

        private static void DisplayError(string filePath, Exception ex)
        {
            // Write out the filename only
            var fileName = Path.GetFileNameWithoutExtension(filePath);
            Console.WriteLine("File: " + fileName);

            // Show the error
            Console.WriteLine("Parser error:");
            Console.WriteLine(ex.Message);
        }

        static void Watcher_Changed(object sender, FileSystemEventArgs e)
        {
            LoadFile(e.FullPath);
        }

        private static void LoadScripts(string scriptDirectory)
        {
            // Create the script directory if it does not exist
            if (!Directory.Exists(scriptDirectory))
                Directory.CreateDirectory(scriptDirectory);

            foreach (var file in Directory.GetFiles(scriptDirectory))
            {
                // Load the file, CBlunt is checked against in LoadFile
                LoadFile(file);
            }
        }

        private static void LoadFile(string filePath)
        {
            // Skip files that are not CBlunt
            if (Path.GetExtension(filePath) != ".cb")
                return;

            // Clear console for clean output
            Console.Clear();

            // Clean the symbol table
            SymbolTable.MethodDictionary.Clear();

            // Write out timestamp to simplify seeing filechanges
            Console.WriteLine(DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss.fff"));

            // Try-catch is used because an exception can be thrown
            try
            {
                // Read text from the file
                FileText = File.ReadAllText(filePath);

                //Begin compiler;
                GenerateSymbolTable();
                CheckSemantics();
                GenerateCode(filePath);
            }
            catch (Exception exception)
            {
                DisplayError(filePath, exception);
            }
        }

        private static void InitializeFileSystemWatcher(string scriptDirectory)
        {
             // Initialize watcher in current directory
            _watcher = new FileSystemWatcher("./" + scriptDirectory);
            
             // Add the method to execute when a file is changed
            _watcher.Changed += new FileSystemEventHandler(Watcher_Changed);
            _watcher.EnableRaisingEvents = true;
            _watcher.IncludeSubdirectories = true;
        }
    }
}
