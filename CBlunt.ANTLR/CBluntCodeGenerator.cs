using System;
using System.Collections.Generic;
using System.Linq;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using CBlunt.ANTLR.AutoGeneratedParser;
using System.Reflection;
using System.IO;

namespace CBlunt.ANTLR
{
    class CBluntCodeGenerator : CBluntBaseVisitor<int>
    {
        string filepath;
        string filecontent;
        List<string> imports;


        public override int VisitStart([NotNull] CBluntParser.StartContext context)
        {
#if DEBUG
            Console.WriteLine("Beginning code generation");
            Console.WriteLine("VisitStart");
#endif
            this.imports.Add("using System;\n");
            this.filecontent += "namespace CBCode { \n class Program { \n";
            for (int count = 0; count < context.ChildCount; ++count)
            {
                Visit(context.GetChild(count));
            }
            this.filecontent += "} }";

            //TODO: Rewrite to loop through the list for each entry instead.
            this.filecontent = this.imports.ToString() + this.filecontent;

            using (StreamWriter stream = File.CreateText(this.filepath))
            {
                stream.WriteLine(this.filecontent);
            }
#if DEBUG
                Console.WriteLine("Finished code generation");
#endif
            return 0;
        }

        public override int VisitDeclaration([NotNull] CBluntParser.DeclarationContext context)
        {
#if DEBUG
            Console.WriteLine("VisitDeclaration");
#endif
            string vartype = context.variabletype().GetText();
            if (vartype == "number")
            {
                this.filecontent += "double ";
            } 
            else if (vartype == "text") 
            {
                this.filecontent += "string ";
            } 
            else if (vartype == "bool ")
            {
                this.filecontent += "Boolean ";
            }

            this.filecontent += context.ID().GetText() + "=" + context.expression().GetText() + ";\n";

            return 0;
        }

        public override int VisitFunction([NotNull] CBluntParser.FunctionContext context)
        {
            if (context.ID(0).GetText() == "Main")
            {
                this.filecontent += "static void Main() {\n";
            } else
            {
                string functiontype = context.functiontype().GetText();
                if (functiontype == "number")
                {
                    this.filecontent += "double ";
                } else if(functiontype == "text ")
                {
                    this.filecontent += "string ";
                } else if (functiontype == "bool")
                {
                    this.filecontent += "Boolean ";
                } else if (functiontype == "void")
                {
                    this.filecontent += "void ";
                }
                this.filecontent += context.ID(0).GetText() + "(";
                
                //TODO: Find some way of translating the parameters

                this.filecontent += ") {\n";

                for (int count = 0; count < context.ChildCount; ++count)
                {
                    Visit(context.GetChild(count));
                }

                this.filecontent += "}\n";
            }

            return 0;
        }

        public override int VisitFunctioncall([NotNull] CBluntParser.FunctioncallContext context)
        {
            this.filecontent += context.ID().GetText() + " (";
            for (int count = 0; count < context.ChildCount; ++count)
            {
                Visit(context.GetChild(count));
                if (context.GetChild(count).GetText() != "(" && context.GetChild(count).GetText() != ")")
                {
                    this.filecontent += ", ";
                }
            }
            this.filecontent += ")";
            return 0;
        }

        public override int VisitParameter([NotNull] CBluntParser.ParameterContext context)
        {

            return 0;
        }

        public CBluntCodeGenerator() {
            string temppath = "Test";
            int count;
            for(count = 0; File.Exists(temppath); ++count){
                temppath = "Test" + count;
            }
            this.filepath = temppath;
            this.filecontent = "";
            imports = new List<string>();
        }
    }
}