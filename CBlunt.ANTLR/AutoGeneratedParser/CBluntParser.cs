//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CBlunt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CBlunt.ANTLR.AutoGeneratedParser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CBluntParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, ID=36, NUMBER=37, STRING=38, TRUTH=39, 
		DIGIT=40, LINECOMMENT=41, COMMENT=42, WS=43;
	public const int
		RULE_start = 0, RULE_block = 1, RULE_function = 2, RULE_statement = 3, 
		RULE_functioncall = 4, RULE_iterative = 5, RULE_selective = 6, RULE_elsestmt = 7, 
		RULE_declaration = 8, RULE_variableedit = 9, RULE_expression = 10, RULE_condition = 11, 
		RULE_logic = 12, RULE_relational = 13, RULE_conditional = 14, RULE_variabletype = 15, 
		RULE_functiontype = 16, RULE_parameter = 17, RULE_functionreturn = 18, 
		RULE_equals = 19;
	public static readonly string[] ruleNames = {
		"start", "block", "function", "statement", "functioncall", "iterative", 
		"selective", "elsestmt", "declaration", "variableedit", "expression", 
		"condition", "logic", "relational", "conditional", "variabletype", "functiontype", 
		"parameter", "functionreturn", "equals"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "','", "')'", "';'", "'while'", "'for'", "'if'", 
		"'else'", "'='", "'+'", "'-'", "'*'", "'/'", "'!'", "'=='", "'>='", "'<='", 
		"'>'", "'<'", "'!='", "'||'", "'&&'", "'or'", "'and'", "'number'", "'text'", 
		"'bool'", "'void'", "'return'", "'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ID", "NUMBER", "STRING", "TRUTH", "DIGIT", "LINECOMMENT", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CBlunt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CBluntParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CBluntParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CBluntParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 42;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 40; function();
					}
					break;
				case 2:
					{
					State = 41; declaration();
					}
					break;
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__0);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				{
				State = 47; statement();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 53; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctiontypeContext functiontype() {
			return GetRuleContext<FunctiontypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(CBluntParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CBluntParser.ID, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariabletypeContext[] variabletype() {
			return GetRuleContexts<VariabletypeContext>();
		}
		public VariabletypeContext variabletype(int i) {
			return GetRuleContext<VariabletypeContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; functiontype();
			State = 56; Match(ID);
			State = 57; Match(T__2);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) {
				{
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 58; variabletype();
						State = 59; Match(ID);
						State = 60; Match(T__3);
						}
						} 
					}
					State = 66;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 67; variabletype();
				State = 68; Match(ID);
				}
			}

			State = 72; Match(T__4);
			State = 73; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IterativeContext iterative() {
			return GetRuleContext<IterativeContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public VariableeditContext variableedit() {
			return GetRuleContext<VariableeditContext>(0);
		}
		public FunctionreturnContext functionreturn() {
			return GetRuleContext<FunctionreturnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
			case T__27:
			case T__28:
			case T__30:
			case ID:
				{
				{
				State = 79;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 75; declaration();
					}
					break;
				case 2:
					{
					State = 76; functioncall();
					}
					break;
				case 3:
					{
					State = 77; variableedit();
					}
					break;
				case 4:
					{
					State = 78; functionreturn();
					}
					break;
				}
				State = 81; Match(T__5);
				}
				}
				break;
			case T__6:
			case T__7:
				{
				State = 83; iterative();
				}
				break;
			case T__8:
				{
				State = 84; selective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 8, RULE_functioncall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(ID);
			State = 88; Match(T__2);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING) | (1L << TRUTH))) != 0)) {
				{
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 89; parameter();
						State = 90; Match(T__3);
						}
						} 
					}
					State = 96;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 97; parameter();
				}
			}

			State = 100; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_iterative);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; Match(T__6);
				State = 103; Match(T__2);
				State = 104; condition();
				State = 105; Match(T__4);
				State = 106; block();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(T__7);
				State = 109; Match(T__2);
				State = 110; declaration();
				State = 111; Match(T__5);
				State = 112; condition();
				State = 113; Match(T__5);
				State = 114; expression(0);
				State = 115; Match(T__4);
				State = 116; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_selective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(T__8);
			State = 121; Match(T__2);
			State = 122; condition();
			State = 123; Match(T__4);
			State = 124; block();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 125; elsestmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_elsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(T__9);
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 129; block();
				}
				break;
			case T__8:
				{
				State = 130; selective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public VariabletypeContext variabletype() {
			return GetRuleContext<VariabletypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; variabletype();
			State = 134; Match(ID);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 135; Match(T__10);
				State = 136; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableeditContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public EqualsContext equals() {
			return GetRuleContext<EqualsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableeditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableedit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableedit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableeditContext variableedit() {
		VariableeditContext _localctx = new VariableeditContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableedit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(ID);
			State = 140; equals();
			State = 141; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 144; Match(T__2);
				State = 145; expression(0);
				State = 146; Match(T__4);
				}
				break;
			case ID:
			case NUMBER:
			case STRING:
			case TRUTH:
				{
				State = 148; parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 151;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 154;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 152;
							_la = TokenStream.LA(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 153; expression(0);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 156;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public LogicContext logic() {
			return GetRuleContext<LogicContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public ConditionalContext[] conditional() {
			return GetRuleContexts<ConditionalContext>();
		}
		public ConditionalContext conditional(int i) {
			return GetRuleContext<ConditionalContext>(i);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 163; Match(T__15);
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 166; logic();
				}
				break;
			case 2:
				{
				State = 167; Match(ID);
				}
				break;
			}
			State = 175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170; conditional();
					State = 171; condition();
					}
					} 
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelationalContext relational() {
			return GetRuleContext<RelationalContext>(0);
		}
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 24, RULE_logic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 178; expression(0);
			State = 179; relational();
			State = 180; expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalContext : ParserRuleContext {
		public RelationalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalContext relational() {
		RelationalContext _localctx = new RelationalContext(Context, State);
		EnterRule(_localctx, 26, RULE_relational);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 28, RULE_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariabletypeContext : ParserRuleContext {
		public VariabletypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variabletype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariabletype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariabletypeContext variabletype() {
		VariabletypeContext _localctx = new VariabletypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_variabletype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontypeContext : ParserRuleContext {
		public VariabletypeContext variabletype() {
			return GetRuleContext<VariabletypeContext>(0);
		}
		public FunctiontypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiontype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiontypeContext functiontype() {
		FunctiontypeContext _localctx = new FunctiontypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_functiontype);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
			case T__27:
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188; variabletype();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189; Match(T__29);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(CBluntParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(CBluntParser.NUMBER, 0); }
		public ITerminalNode TRUTH() { return GetToken(CBluntParser.TRUTH, 0); }
		public ITerminalNode ID() { return GetToken(CBluntParser.ID, 0); }
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameter);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194; Match(TRUTH);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 195; Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 196; functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionreturnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionreturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionreturn; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionreturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionreturnContext functionreturn() {
		FunctionreturnContext _localctx = new FunctionreturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionreturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(T__30);
			State = 200; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualsContext : ParserRuleContext {
		public EqualsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICBluntVisitor<TResult> typedVisitor = visitor as ICBluntVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualsContext equals() {
		EqualsContext _localctx = new EqualsContext(Context, State);
		EnterRule(_localctx, 38, RULE_equals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\xCF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '-', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '.', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x33', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x36', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x41', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x44', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'I', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'R', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '_', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x62', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x65', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'y', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x81', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x86', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x8C', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x98', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', '\x9D', '\n', '\f', '\r', 
		'\f', '\xE', '\f', '\x9E', '\a', '\f', '\xA1', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xA4', '\v', '\f', '\x3', '\r', '\x5', '\r', '\xA7', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAB', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xB0', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xB3', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\xC1', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xC8', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x2', '\x3', '\x16', '\x16', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '\x2', '\a', '\x3', '\x2', '\xE', '\x11', '\x3', 
		'\x2', '\x13', '\x18', '\x3', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x1D', 
		'\x1F', '\x4', '\x2', '\r', '\r', '\"', '%', '\x2', '\xD5', '\x2', ',', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x39', '\x3', '\x2', '\x2', '\x2', '\b', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'Y', '\x3', '\x2', '\x2', '\x2', '\f', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'z', '\x3', '\x2', '\x2', '\x2', '\x10', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xBA', '\x3', '\x2', '\x2', '\x2', ' ', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xC0', '\x3', '\x2', '\x2', '\x2', '$', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xC9', '\x3', '\x2', '\x2', '\x2', '(', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '*', '-', '\x5', '\x6', '\x4', '\x2', '+', 
		'-', '\x5', '\x12', '\n', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x3', '\x3', '\x2', '\x2', '\x2', '\x30', '\x34', '\a', '\x3', '\x2', 
		'\x2', '\x31', '\x33', '\x5', '\b', '\x5', '\x2', '\x32', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x4', '\x2', '\x2', '\x38', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x5', '\"', '\x12', '\x2', 
		':', ';', '\a', '&', '\x2', '\x2', ';', 'H', '\a', '\x5', '\x2', '\x2', 
		'<', '=', '\x5', ' ', '\x11', '\x2', '=', '>', '\a', '&', '\x2', '\x2', 
		'>', '?', '\a', '\x6', '\x2', '\x2', '?', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '@', '<', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x5', ' ', 
		'\x11', '\x2', '\x46', 'G', '\a', '&', '\x2', '\x2', 'G', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x42', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\a', '\a', '\x2', '\x2', 'K', 'L', '\x5', '\x4', '\x3', '\x2', 'L', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'M', 'R', '\x5', '\x12', '\n', '\x2', 
		'N', 'R', '\x5', '\n', '\x6', '\x2', 'O', 'R', '\x5', '\x14', '\v', '\x2', 
		'P', 'R', '\x5', '&', '\x14', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', '\b', '\x2', '\x2', 'T', 'X', '\x3', '\x2', '\x2', '\x2', 
		'U', 'X', '\x5', '\f', '\a', '\x2', 'V', 'X', '\x5', '\xE', '\b', '\x2', 
		'W', 'Q', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\a', '&', '\x2', '\x2', 'Z', '\x64', '\a', '\x5', '\x2', 
		'\x2', '[', '\\', '\x5', '$', '\x13', '\x2', '\\', ']', '\a', '\x6', '\x2', 
		'\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', '\x2', '\x2', 
		'\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x65', '\x5', '$', '\x13', '\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\a', '\a', '\x2', '\x2', 'g', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\a', '\t', '\x2', '\x2', 'i', 'j', '\a', 
		'\x5', '\x2', '\x2', 'j', 'k', '\x5', '\x18', '\r', '\x2', 'k', 'l', '\a', 
		'\a', '\x2', '\x2', 'l', 'm', '\x5', '\x4', '\x3', '\x2', 'm', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\a', '\n', '\x2', '\x2', 'o', 'p', '\a', 
		'\x5', '\x2', '\x2', 'p', 'q', '\x5', '\x12', '\n', '\x2', 'q', 'r', '\a', 
		'\b', '\x2', '\x2', 'r', 's', '\x5', '\x18', '\r', '\x2', 's', 't', '\a', 
		'\b', '\x2', '\x2', 't', 'u', '\x5', '\x16', '\f', '\x2', 'u', 'v', '\a', 
		'\a', '\x2', '\x2', 'v', 'w', '\x5', '\x4', '\x3', '\x2', 'w', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'h', '\x3', '\x2', '\x2', '\x2', 'x', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\r', '\x3', '\x2', '\x2', '\x2', 'z', '{', 
		'\a', '\v', '\x2', '\x2', '{', '|', '\a', '\x5', '\x2', '\x2', '|', '}', 
		'\x5', '\x18', '\r', '\x2', '}', '~', '\a', '\a', '\x2', '\x2', '~', '\x80', 
		'\x5', '\x4', '\x3', '\x2', '\x7F', '\x81', '\x5', '\x10', '\t', '\x2', 
		'\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\xF', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', 
		'\a', '\f', '\x2', '\x2', '\x83', '\x86', '\x5', '\x4', '\x3', '\x2', 
		'\x84', '\x86', '\x5', '\xE', '\b', '\x2', '\x85', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x5', ' ', '\x11', '\x2', 
		'\x88', '\x8B', '\a', '&', '\x2', '\x2', '\x89', '\x8A', '\a', '\r', '\x2', 
		'\x2', '\x8A', '\x8C', '\x5', '\x16', '\f', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '&', '\x2', 
		'\x2', '\x8E', '\x8F', '\x5', '(', '\x15', '\x2', '\x8F', '\x90', '\x5', 
		'\x16', '\f', '\x2', '\x90', '\x15', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\b', '\f', '\x1', '\x2', '\x92', '\x93', '\a', '\x5', '\x2', 
		'\x2', '\x93', '\x94', '\x5', '\x16', '\f', '\x2', '\x94', '\x95', '\a', 
		'\a', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x98', '\x5', '$', '\x13', '\x2', '\x97', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9C', '\f', '\x5', '\x2', '\x2', '\x9A', 
		'\x9B', '\t', '\x2', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\x16', '\f', 
		'\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\a', 
		'\x12', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAB', '\x5', '\x1A', '\xE', '\x2', '\xA9', '\xAB', '\a', 
		'&', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', '\x1E', '\x10', '\x2', '\xAD', '\xAE', '\x5', 
		'\x18', '\r', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', '\x16', '\f', 
		'\x2', '\xB5', '\xB6', '\x5', '\x1C', '\xF', '\x2', '\xB6', '\xB7', '\x5', 
		'\x16', '\f', '\x2', '\xB7', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\t', '\x3', '\x2', '\x2', '\xB9', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBB', '\t', '\x4', '\x2', '\x2', '\xBB', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\t', '\x5', '\x2', '\x2', '\xBD', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x5', ' ', '\x11', '\x2', 
		'\xBF', '\xC1', '\a', ' ', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '#', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC8', '\a', '(', '\x2', '\x2', '\xC3', 
		'\xC8', '\a', '\'', '\x2', '\x2', '\xC4', '\xC8', '\a', ')', '\x2', '\x2', 
		'\xC5', '\xC8', '\a', '&', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\n', 
		'\x6', '\x2', '\xC7', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '%', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', '!', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x16', '\f', '\x2', '\xCB', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\t', '\x6', '\x2', 
		'\x2', '\xCD', ')', '\x3', '\x2', '\x2', '\x2', '\x17', ',', '.', '\x34', 
		'\x42', 'H', 'Q', 'W', '`', '\x64', 'x', '\x80', '\x85', '\x8B', '\x97', 
		'\x9E', '\xA2', '\xA6', '\xAA', '\xB1', '\xC0', '\xC7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CBlunt.ANTLR.AutoGeneratedParser
