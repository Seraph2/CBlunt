using System;
using System.Collections.Generic;
using System.Linq;
using Antlr4.Runtime.Misc;
using CBlunt.ANTLR.AutoGeneratedParser;

namespace CBlunt.ANTLR
{
    class SymbolTableGenerator : CBluntBaseVisitor<int>
    {
        public override int VisitStart([NotNull] CBluntParser.StartContext context)
        {
#if DEBUG
            Console.WriteLine("Beginning symbol table generation");
            Console.WriteLine("VisitStart");
#endif
            // Create API methods first
            CreateAPIMethods();

            // Only visit functions as that is required of symboltable so far
            for (int i = 0; i < context.function().Count(); ++i)
                Visit(context.function(i));

#if DEBUG
            Console.WriteLine("Finished symbol table generation");
#endif
            return 0;
        }

        public override int VisitBlock([NotNull] CBluntParser.BlockContext context)
        {
            return base.VisitBlock(context);
        }

        public override int VisitFunction([NotNull] CBluntParser.FunctionContext context)
        {
#if DEBUG
            Console.WriteLine("VisitFunction");
#endif

            // The type of the method
            var methodType = context.functiontype().GetText();

            // The name of the method
            var methodName = context.ID(0).GetText();

            // The list of parameter types the method has
            var methodTypes = new List<string>();

            for (int i = 0; i < context.variabletype().Count(); ++i)
            {
                // Get the parameter type
                var methodParameter = context.variabletype(i).GetText();

                // Add it to the list of parameter types the method has
                methodTypes.Add(methodParameter);
            }

            // Create MethodProperties object
            var methodProperties = new MethodProperties
            {
                Type = methodType,
                ParameterTypes = methodTypes
            };

            // Add the method along with its properties to the symbol table
            CreateMethod(methodName, methodProperties);

            return base.VisitFunction(context);
        }

        void CreateAPIMethods()
        {
            // Helper variable for setting API functions methodproperties
            MethodProperties methodProperties;

            // WriteLine
            methodProperties = new MethodProperties
            {
                Type = "void",
                ParameterTypes = new List<string> { "text" }
            };

            CreateMethod("WriteLine", methodProperties);

            // ReadLine
            methodProperties = new MethodProperties
            {
                Type = "text",
                ParameterTypes = new List<string> { }
            };

            CreateMethod("ReadLine", methodProperties);
        }

        void CreateMethod(string methodName, MethodProperties methodProperties)
        {
            // Determine if the method already exists
            if (SymbolTable.MethodDictionary.ContainsKey(methodName))
            {
                Console.WriteLine("Symbol table generation error! Script contains declaration for API method with name: " + methodName);
                return;
            }

            // Add the method to the symbol table
            SymbolTable.MethodDictionary.Add(methodName, methodProperties);
        }
    }
}