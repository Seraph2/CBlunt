using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Antlr4.Runtime;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using CBlunt.ANTLR.AutoGeneratedParser;
using System.Threading;

namespace CBlunt.ANTLR
{
    class Program
    {
        private static FileSystemWatcher _watcher;

        private static string GetInput()
        {
            Console.Write("Enter a value to evaluate: ");
            return Console.ReadLine();
        }

        private static void EvaluateInput(string input)
        {
            CBluntLexer lexer = new CBluntLexer(new AntlrInputStream(input));

            lexer.RemoveErrorListeners();
            lexer.AddErrorListener(new ThrowingErrorListener<int>());

            CBluntParser parser = new CBluntParser(new CommonTokenStream(lexer));

            parser.RemoveErrorListeners();
            parser.AddErrorListener(new ThrowingErrorListener<IToken>());

            // Check semantics
            new CBluntSemanticChecker().Visit(parser.start());

            // Generate code
            //new CBluntCodeGenerator().Visit(parser.start());
        }

        private static void DisplayResult(int result)
        {
            Console.WriteLine($"Result: {result}");
        }

        private static void DisplayError(Exception ex)
        {
            Console.WriteLine("Parser error:");
            Console.WriteLine(ex.Message);
        }

        public static void Main()
        {
            InitializeFileSystemWatcher();
            LoadFile("SampleCode.txt");

            while (true) // Continually loop forever as the program should not stop
            {
                Thread.Sleep(1); // Reduce CPU usage marginally
            }
        }

        static void Watcher_Changed(object sender, FileSystemEventArgs e)
        {
            LoadFile(e.FullPath);
        }

        private static void LoadFile(string filePath)
        {
            Console.Clear(); // Clear console for clean output

            Console.WriteLine(DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss.fff")); // Write out timestamp

            try // Try-catch is used because an exception can be thrown
            {
                string fileText = File.ReadAllText(filePath); // Read text from the changed file

                EvaluateInput(fileText); // Give result if success, display error when failed to parse
            }
            catch (Exception exception)
            {
                DisplayError(exception);
            }
        }

        private static void InitializeFileSystemWatcher()
        {
            _watcher = new FileSystemWatcher("."); // Initialize watcher in current directory
            _watcher.Changed += new FileSystemEventHandler(Watcher_Changed); // Add the method to execute when a file is changed
            _watcher.EnableRaisingEvents = true;
            _watcher.IncludeSubdirectories = true;
        }
    }
}
